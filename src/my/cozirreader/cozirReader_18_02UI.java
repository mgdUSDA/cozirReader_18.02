/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.cozirreader;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;
import jssc.SerialPort;
import jssc.SerialPortException;
import jssc.SerialPortList;
import jssc.SerialPortTimeoutException;

/**
 *
 * @author mdusaire
 *
 * What's new:
 *
 * version18_02 edited on 02/23/2018 adds a list to the GUI so that the user can
 * select more than 1 serial port
 *
 * Reads data from Grove Multi-channel gas sensor collected using myReadSensorValue_Grove_poll.
 *
 * Fix needed:  idSensor() is returning null roughly every other time it queries the Grove sensor.
 *              Column header written to file every time data collection is restarted.
 * 
 * To do:   Enable delayed start.
 *          Clean up unused variables.
 *          Reduce run-time to 1 second.  Currently polling Grove sensor requires a 2 second delay
 *              between port.writeBytes() and port.readBytes() operations.
 *
 */
public class cozirReader_18_02UI extends javax.swing.JFrame {

    // Never ever use global variables
    String filep, SpokasOutpath = "C:" + File.separator + "Spokas" + File.separator + "Cozir" + File.separator + "data",
            dataHeader = "index,id,datetime,time,reading,measure,port",
            sampleDate, startDate, specialCharacters = "^[A-Za-z0-9 ]+$";
    String[] ignorePort = {"COM1", "COM3"};
    Timer getDataTimer;
    int dataCount = 1, difference = 1, nmax, tmax, resetCount = 1;
    boolean reset = true;

    DateFormat df = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
    DateFormat df_out = new SimpleDateFormat("MMddyy HHmm");
    DateFormat tf = new SimpleDateFormat("HH:mm:ss");

    String doublef = "%.2f";

    /**
     * Creates new form cozirReaderUI
     */
    public cozirReader_18_02UI() {
        initComponents();
        setPortList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_interval = new javax.swing.JLabel();
        jLabel_info = new javax.swing.JLabel();
        jLabel_fname = new javax.swing.JLabel();
        jTextField_interval = new javax.swing.JTextField();
        jTextField_info = new javax.swing.JTextField();
        jTextField_fname = new javax.swing.JTextField();
        jComboBox_intervalUnits = new javax.swing.JComboBox();
        jButton_start = new javax.swing.JButton();
        jButton_reset = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_output = new javax.swing.JTextArea();
        jButton_quit = new javax.swing.JButton();
        jButton_stop = new javax.swing.JButton();
        jLabel_extension = new javax.swing.JLabel();
        jLabel_ports = new javax.swing.JLabel();
        jTextField_countdown = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_ports = new javax.swing.JList<>();
        jCheckBox_delayedStart = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_interval.setText("Sampling interval:");

        jLabel_info.setText("Sample info:");

        jLabel_fname.setText("C:\\Spokas\\Cozir\\data\\");

            jTextField_interval.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jTextField_interval.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            jTextField_interval.setText("2");

            jTextField_info.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jTextField_info.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            jTextField_info.setText("Sample1");
            jTextField_info.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField_infoActionPerformed(evt);
                }
            });

            jTextField_fname.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jTextField_fname.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            jTextField_fname.setText("data");

            jComboBox_intervalUnits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "s", "min" }));

            jButton_start.setText("Start");
            jButton_start.setPreferredSize(new java.awt.Dimension(100, 30));
            jButton_start.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton_startActionPerformed(evt);
                }
            });

            jButton_reset.setText("Reset");
            jButton_reset.setEnabled(false);
            jButton_reset.setPreferredSize(new java.awt.Dimension(100, 30));
            jButton_reset.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton_resetActionPerformed(evt);
                }
            });

            jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

            jTextArea_output.setColumns(20);
            jTextArea_output.setRows(5);
            jScrollPane1.setViewportView(jTextArea_output);

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addContainerGap())
            );

            jButton_quit.setText("Quit");
            jButton_quit.setPreferredSize(new java.awt.Dimension(100, 30));
            jButton_quit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton_quitActionPerformed(evt);
                }
            });

            jButton_stop.setText("Stop");
            jButton_stop.setEnabled(false);
            jButton_stop.setPreferredSize(new java.awt.Dimension(100, 30));
            jButton_stop.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton_stopActionPerformed(evt);
                }
            });

            jLabel_extension.setText(".txt");

            jLabel_ports.setText("Select COM port:");

            jTextField_countdown.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            jTextField_countdown.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            jTextField_countdown.setPreferredSize(new java.awt.Dimension(20, 30));
            jTextField_countdown.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField_countdownActionPerformed(evt);
                }
            });

            jList_ports.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4" };
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });
            jScrollPane2.setViewportView(jList_ports);

            jCheckBox_delayedStart.setText("Delayed start");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel_ports)
                                        .addComponent(jLabel_info))
                                    .addComponent(jLabel_fname))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextField_fname, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField_info, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel_extension)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton_stop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextField_interval, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox_intervalUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(39, 39, 39)
                                                .addComponent(jTextField_countdown, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jCheckBox_delayedStart)
                                                    .addComponent(jButton_reset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addComponent(jLabel_interval))
                                .addGap(3, 3, 3)))
                        .addComponent(jButton_quit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(46, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel_interval)
                            .addGap(9, 9, 9)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBox_intervalUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField_interval, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCheckBox_delayedStart))
                            .addGap(10, 10, 10))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel_ports))))
                    .addGap(26, 26, 26)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField_info, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel_info)
                        .addComponent(jButton_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_reset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_fname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_extension)
                            .addComponent(jLabel_fname))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_countdown, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_stop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jButton_quit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(48, 48, 48))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jTextField_infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_infoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_infoActionPerformed

    private void jButton_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_startActionPerformed
        // TODO add your handling code here:
        if (userInputOkay()) {
            runningPanel();
            startDataCollection();
        }
    }//GEN-LAST:event_jButton_startActionPerformed

    private void jButton_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_resetActionPerformed
        // TODO add your handling code here:
        //reset parameter for new dataset
        getDataTimer.stop();
        dataCount = 1;
        resetCount = 1;
        reset = true;
        resetPanel();
    }//GEN-LAST:event_jButton_resetActionPerformed

    private void jButton_quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_quitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton_quitActionPerformed

    private void jButton_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_stopActionPerformed
        // TODO add your handling code here:
        //stop data collection and allow change in all parameter except _fname
        getDataTimer.stop();
        dataCount = 1;
        stopPanel();
    }//GEN-LAST:event_jButton_stopActionPerformed

    private void jTextField_countdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_countdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_countdownActionPerformed

    public final void setPortList() {
        String[] portsList = SerialPortList.getPortNames();
        jList_ports.setListData(portsList);
    }

    public void runningPanel() {
        jButton_quit.setEnabled(true);
        jButton_reset.setEnabled(true);
        jButton_start.setEnabled(false);
        jButton_start.setText("Running");
        jButton_stop.setEnabled(true);
        jCheckBox_delayedStart.setEnabled(false);
        jComboBox_intervalUnits.setEnabled(false);
        jList_ports.setEnabled(false);
        jTextField_fname.setEnabled(false);
        jTextField_info.setEnabled(false);
        jTextField_interval.setEnabled(false);
    }

    public void stopPanel() {
        jButton_quit.setEnabled(true);
        jButton_reset.setEnabled(true);
        jButton_start.setEnabled(true);
        jButton_start.setText("Start");
        jButton_stop.setEnabled(false);
        jCheckBox_delayedStart.setEnabled(true);
        jComboBox_intervalUnits.setEnabled(true);
        jList_ports.setEnabled(false);
        jTextArea_output.setText("");
        jTextField_countdown.setText("");
        jTextField_fname.setEnabled(false);
        jTextField_info.setEnabled(true);
        jTextField_interval.setEnabled(true);
    }

    public void resetPanel() {
        jButton_quit.setEnabled(true);
        jButton_reset.setEnabled(false);
        jButton_start.setEnabled(true);
        jButton_start.setText("Start");
        jButton_start.setToolTipText(null);
        jButton_stop.setEnabled(false);
        jCheckBox_delayedStart.setSelected(false);
        jComboBox_intervalUnits.setEnabled(true);
        jComboBox_intervalUnits.setSelectedIndex(0);
        jList_ports.setEnabled(true);
        jTextArea_output.setText("");
        jTextField_countdown.setText("");
        jTextField_fname.setEnabled(true);
        jTextField_fname.setText("data");
        jTextField_info.setEnabled(true);
        jTextField_info.setText("Sample 1");
        jTextField_interval.setEnabled(true);
        jTextField_interval.setText("2");
    }

    public int setupCounters() {
        int interval, intervalMillis, period, periodMillis;

        String intervalUnits;

        interval = Integer.parseInt(jTextField_interval.getText());
        intervalUnits = (String) jComboBox_intervalUnits.getSelectedItem();

        intervalMillis = getIntervalMilli(interval, intervalUnits);
        return (intervalMillis);
    }

    public boolean userInputOkay() {
        boolean intervalOkay, fnameOkay;
        int interval;
        String fname;

        interval = Integer.parseInt(jTextField_interval.getText());
        fname = jTextField_fname.getText();

        if (interval > 0 & interval < 60) {
            intervalOkay = true;
            jTextField_interval.setForeground(Color.black);
        } else {
            intervalOkay = false;
            jTextField_interval.setForeground(Color.red);
        }
        if (fname.matches("[\\dA-Za-z]+")) {
            fnameOkay = true;
            jLabel_fname.setForeground(Color.black);
        } else {
            fnameOkay = false;
            jLabel_fname.setForeground(Color.red);
        }
        return (intervalOkay & fnameOkay);
    }

    public int getIntervalMilli(int inter, String unitName) {
        int multiplier = 1000, intervalMilliseconds;
        switch (unitName) {
            case "s":
                multiplier = 1000;
                break;
            case "min":
                multiplier = 60 * 1000;
                break;
            case "hr":
                multiplier = 3600 * 1000;
                break;
            case "day":
                multiplier = 24 * 3600 * 1000;
                break;
        }
        intervalMilliseconds = inter * multiplier;
//        System.out.println("getIntervalMilli[intervalMilliseconds]: " + intervalMilliseconds);
        return (intervalMilliseconds);
    }

    public String setFilePath() {
        String fname, fext = ".txt", filepath, runDate, version = "_18.02_";

        fname = jTextField_fname.getText();
        createOutputDir(SpokasOutpath);
        runDate = df_out.format(new Date()); // Timestamp for data file
        filepath = SpokasOutpath + File.separator + fname + version + runDate + fext;
        return (filepath);
    }

    public void createOutputDir(String fpath) {

        File fdir = new File(fpath);
        fdir.mkdirs();
        jLabel_fname.setText(fpath);
    }

    public File createOutFile(String fp) {
        File file = new File(fp);
        // If file does not exists, then create it.
        if (!file.exists()) {
//            System.out.println("createOutFile[!file.exists()]: " + !file.exists());
//            System.out.println("Creating " + fp);
            try {
                file.createNewFile();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        return (file);
    }

    public void startDataCollection() {

        int interval, intMillis;
        boolean stillWaiting = true;
        String sampleID, portName, portNames[], units;

//        System.out.println("startDataCollection[dataCount] (at the beginning of the function): " + dataCount);
        if (reset) {
            filep = setFilePath();
        }
        reset = false;
        portNames = SerialPortList.getPortNames();
        sampleID = jTextField_info.getText();
        interval = Integer.parseInt(jTextField_interval.getText());
        units = (String) jComboBox_intervalUnits.getSelectedItem();
        intMillis = getIntervalMillis(interval, units);

//        if (jCheckBox_delayedStart.isSelected()) {
//            System.out.println("Delayed start selected");
//            jTextArea_output.setText("Waiting for next sampling period..." + interval + units);
//        } else {
//            System.out.println("Start immediately or done waiting");
//        }
        getDataTimer = new Timer(setupCounters(), new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                sampleDate = df.format(new Date());
                if (resetCount == 1) {
                    startDate = sampleDate;
                    // Write data file header
                    writeData(filep, dataHeader);
                }
                 jTextArea_output.setText("");
                for (int i : jList_ports.getSelectedIndices()) {
//                    System.out.println("startDataCollection[portNames[" + i + "]]: " + portNames[i]);
                    if (!Arrays.toString(ignorePort).contains(portNames[i])) {
                        getReadings(portNames[i], sampleID, startDate, sampleDate, filep);
//                        System.out.println("startDataCollection[jButton_start.getText()]: " + jButton_start.getText());
//                        System.out.println("startDataCollection[dataCount][" + i + "]: " + dataCount);
                    }
                }
                dataCount++;
                resetCount++;
            }
        });
        getDataTimer.setInitialDelay(0);
        getDataTimer.start();
    }

    public int getIntervalMillis(int inter, String unitName) {
        int multiplier = 1000, intervalMilliseconds;
        switch (unitName) {
            case "sec":
                multiplier = 1000;
                break;
            case "min":
                multiplier = 60 * 1000;
                break;
            case "hr":
                multiplier = 3600 * 1000;
                break;
            case "day":
                multiplier = 24 * 3600 * 1000;
                break;
        }
        intervalMilliseconds = inter * multiplier;
        return (intervalMilliseconds);
    }

    public boolean waitForIt(int diff, int inter, String unitName, long ttime) {
        final long second = 1000;
        final long minute = 60 * second;
        final long hour = 60 * minute;
        boolean fire = false;

        int hours = (int) Math.floor(ttime / hour);
        ttime -= hour * hours;
        int minutes = (int) Math.floor(ttime / minute);
        ttime -= minute * minutes;
        int seconds = (int) Math.floor(ttime / second);

        switch (unitName) {
            case "sec":
                if (seconds % inter == 0) {
                    fire = true;
                }
                break;
            case "min":
                if ((minutes % inter == 0) && (seconds % 60 < diff)) {
                    fire = true;
                }
                break;
            case "hr":
                while ((minutes == 0) && (seconds % 60 < diff)) {
                    fire = true;
                }
                break;
        }
//        System.out.println("waitForIt[fire]: " + fire);
        return (fire);
    }

    public double getSampleTimes(String start, String current) {
        double dt = 0, factor = 1000;

        try {
            Date st = df.parse(start);
            Date curr = df.parse(current);

            dt = (double) (curr.getTime() - st.getTime());
            dt = dt / factor;
//            System.out.println("getSampleTimes[dt] (Time interval):" + dt);
        } catch (ParseException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return (dt);
    }

    public void openPort(SerialPort port) {
        try {
            port.openPort();//Open serial port
            //serialPort.setParams(9600, 8, 1, 0);//Set params.
            port.setParams(SerialPort.BAUDRATE_9600,
                    SerialPort.DATABITS_8,
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE);
            System.out.println("openPort[port]: " + port.getPortName());
        } catch (SerialPortException ex) {
            System.out.println(ex);
        }
    }

    public void getReadings(String portName, String id, String starttime, String datetime, String fp) {

        String dataString, readings, sampleInfo, sensorType = "NA", Z, cozirT, uvfluxT, H, O, P, G, pollMode;
        String[] lines, sensorData, GroveMCCompounds = {"NH3", "CO", "NO2", "C3H8", "C4H10", "CH4", "H2", "C2H5OH"};
        double sampleTime;
        int groveMax;

        byte[] co2Command = new byte[]{0x5A, 0x0D, 0x0A};
        byte[] tempCommand = new byte[]{0x54, 0x0D, 0x0A};
        byte[] humidCommand = new byte[]{0x48, 0x0D, 0x0A};
        byte[] pollUVFluxCommand = new byte[]{0x4D, 0x20, 0x31, 0x0D, 0x0A};
        byte[] pollCozirCommand = new byte[]{0x4B, 0x20, 0x32, 0x0D, 0x0A};
        byte[] o2Command = new byte[]{0x25, 0x0D, 0x0A};
        byte[] presCommand = new byte[]{0x50, 0x0D, 0x0A};
        byte[] groveCommand = new byte[]{0x74};

        sampleTime = getSampleTimes(starttime, datetime);
        sampleInfo = dataCount + "," + id + "," + datetime;
        SerialPort serialPort = new SerialPort(portName);

        // Set sensor to polling mode
        pollMode = idSensor(serialPort, pollCozirCommand);
        System.out.println("getReadings[pollMode]: " + pollMode);
        if (null != pollMode) {
            switch (pollMode) {
                case " K 00002\r\n":
                    sensorType = "Cozir";
                    break;
                case "E 01\r\n":
                    pollMode = idSensor(serialPort, pollUVFluxCommand);
                    // Confirm that sensor is UV-Flux
                    if ("M 01\r\n".equals(pollMode)) {
                        sensorType = "UV-Flux";
                    } else {
                        // The sensor is an unidentified GSS sensor.
                    }
                    break;
                default:
                    sensorType = "GroveSeeed";
                    break;
            }
        } else {
            // Must be GroveSeeed.  It appears that idSensor Thread.sleep(200) is insufficient time for the Grove sensor
            // to wake up and repond.
            sensorType = "GroveSeeed";
        }
        System.out.println("getReadings[pollMode] (final): " + pollMode);
        System.out.println("getReadings[sensorType]: " + sensorType);
        if ("Cozir".equals(sensorType)) {

            // Do Cozir measurements
            Z = pollCozir(serialPort, co2Command);
            if ("NA".equals(Z)) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + ",NA,CO2," + portName + "\n";
            } else {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + Double.parseDouble(Z) + ",CO2," + portName + "\n";
            }
//            System.out.println(readings);
            writeData(fp, readings);
            jTextArea_output.append(readings);

            H = pollCozir(serialPort, humidCommand);
            if ("NA".equals(H)) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + ",NA,Humidity," + portName + "\n";
            } else {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + Double.parseDouble(H) / 10 + ",Humidity," + portName + "\n";
            }
//            System.out.println(readings);
            writeData(fp, readings);
            jTextArea_output.append(readings);

            cozirT = pollCozir(serialPort, tempCommand);
            if ("NA".equals(cozirT)) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + ",NA,Temperature," + portName + "\n";
            } else {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + (Double.parseDouble(cozirT) % 1000) / 10 + ",Temperature," + portName + "\n";
            }
            //T = "01225" equals a temperature of 22.5C
//            System.out.println(readings);
            writeData(fp, readings);
            jTextArea_output.append(readings);
        }

        if ("UV-Flux".equals(sensorType)) {
            O = pollUVFlux(serialPort, o2Command);
            if ("NA".equals(O)) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + ",NA,O2," + portName + "\n";
            } else {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + Double.parseDouble(O) + ",O2," + portName + "\n";
            }
//            System.out.println(readings);
            writeData(fp, readings);
            jTextArea_output.append(readings);

            P = pollUVFlux(serialPort, presCommand);
            if ("NA".equals(P)) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + ",NA,Pressure," + portName + "\n";
            } else {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + Double.parseDouble(P) + ",Pressure," + portName + "\n";
            }
//            System.out.println(readings);
            writeData(fp, readings);
            jTextArea_output.append(readings);

            uvfluxT = pollUVFlux(serialPort, tempCommand);
            if ("NA".equals(uvfluxT)) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + ",NA,uvTemperature," + portName + "\n";
            } else {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + Double.parseDouble(uvfluxT) + ",uvTemperature," + portName + "\n";
            }
//            System.out.println(readings);
            writeData(fp, readings);
            jTextArea_output.append(readings);
        }

        // Otherwise assume maybe a Grove Seeeduino?
        if ("GroveSeeed".equals(sensorType)) {
            G = pollGrove(serialPort, groveCommand);
//            System.out.println("getReadings[G]: " + G);
            lines = G.split("\r\n|\r|\n");
            dataString = lines[lines.length - 1];
            sensorData = dataString.split(",");
//            System.out.println("getReadings[sensorData]: " + Arrays.toString(sensorData));
            groveMax = Math.min(sensorData.length, GroveMCCompounds.length);
            for (int i = 0; i < groveMax; i++) {
                readings = sampleInfo + "," + String.format("%.3f", sampleTime) + "," + sensorData[i] + "," + GroveMCCompounds[i] + "," + portName + "\n";
//                System.out.println(readings);
                writeData(fp, readings);
                jTextArea_output.append(readings);
            }
            jTextField_countdown.setText(String.format("%03d", dataCount));
        }
    }

    public String checkString(String input, String lookup) {
        String output;
        int head;

        output = input.replaceAll("\\s", "");
        head = lookup.indexOf(output.charAt(0));
        if (head >= 0 & head < lookup.length()) {
            // Good reading. Remove leading char and return digit string.
            output = input.replaceAll(lookup, "");
        } else {
            output = "NA";
        }
        return (output);
    }

    public String idSensor(SerialPort port, byte[] queryCommand) {
        String sensorResponse = "NA";

//        System.out.println("idSensor()");
        openPort(port);
        try {
            port.writeBytes(queryCommand);
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sensorResponse = port.readString();
//            System.out.println("idSensor[sensorResponse]: " + sensorResponse);
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Close port
        try {
            port.closePort();
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("idSensor[sensorResponse]: " + sensorResponse);
        return (sensorResponse);
    }

    public String pollUVFlux(SerialPort port, byte[] readCommand) {
        String sensorResponse = "";

        openPort(port);
        try {
            port.writeBytes(readCommand);
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sensorResponse = port.readString(8, 500);
            sensorResponse = checkString(sensorResponse, "[%PT]");
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Close port
        try {
            port.closePort();
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return (sensorResponse);
    }

    public String pollGrove(SerialPort port, byte[] readCommand) {
        String sensorResponse = "";

        openPort(port);

        try {
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            port.writeBytes(readCommand);
            // port.writeBytes(readCommand);
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sensorResponse = port.readString();
//            System.out.println("pollGrove[sensorResponse]: " + sensorResponse);
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Close port
        try {
            port.closePort();
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return (sensorResponse);
    }

    public String pollCozir(SerialPort port, byte[] readCommand) {
        String sensorResponse = "NA";

        openPort(port);
        try {
            port.writeBytes(readCommand);
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sensorResponse = port.readString(10, 500);
            sensorResponse = checkString(sensorResponse, "[HTZ]");
        } catch (SerialPortException | SerialPortTimeoutException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Close port
        try {
            port.closePort();
        } catch (SerialPortException ex) {
            Logger.getLogger(cozirReader_18_02UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return (sensorResponse);
    }

    public void writeData(String fp, String data) {
        try {
            File file = new File(fp);
            // If file doesnt exists, then create it.
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
            // If file exists append data to file.
            FileWriter fstream = new FileWriter(file, true);
            try (BufferedWriter out = new BufferedWriter(fstream)) {
                out.write(data);
                out.newLine();
                out.close();
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cozirReader_18_02UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cozirReader_18_02UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_quit;
    private javax.swing.JButton jButton_reset;
    private javax.swing.JButton jButton_start;
    private javax.swing.JButton jButton_stop;
    private javax.swing.JCheckBox jCheckBox_delayedStart;
    private javax.swing.JComboBox jComboBox_intervalUnits;
    private javax.swing.JLabel jLabel_extension;
    private javax.swing.JLabel jLabel_fname;
    private javax.swing.JLabel jLabel_info;
    private javax.swing.JLabel jLabel_interval;
    private javax.swing.JLabel jLabel_ports;
    private javax.swing.JList<String> jList_ports;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea_output;
    private javax.swing.JTextField jTextField_countdown;
    private javax.swing.JTextField jTextField_fname;
    private javax.swing.JTextField jTextField_info;
    private javax.swing.JTextField jTextField_interval;
    // End of variables declaration//GEN-END:variables
}
